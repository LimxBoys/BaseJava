<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:b="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd">

	<!--登录页面不过滤 -->
	<http pattern="/login.jsp" security="none" />
	<http pattern="/accessDenied.jsp" security="none" />
	<http use-expressions="true" entry-point-ref="myAuthenticationEntryPoint" access-denied-page="/accessDenied.jsp">
		<!-- <form-login login-page="/login.jsp" /> -->
		<session-management>
			<concurrency-control max-sessions="1"
				error-if-maximum-exceeded="false" />
		</session-management>
		<!-- 认证和授权 --><!-- 重写登陆认证的过滤器，使我们可以拿到任何参数 -->
		<custom-filter ref="myAuthenticationFilter" position="FORM_LOGIN_FILTER" />
		<!--增加一个filter，这点与 Acegi是不一样的，不能修改默认的filter了， 这个filter位于FILTER_SECURITY_INTERCEPTOR之前 -->
		<custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR" />
		<!-- 登出管理 -->
		<logout invalidate-session="true" logout-url="/j_spring_security_logout" />  
	</http>
	<!-- 未登录的切入点 --><!-- 需要有个切入点 -->
	<b:bean id="myAuthenticationEntryPoint"
		class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<b:property name="loginFormUrl" value="/login.jsp"></b:property>
	</b:bean>
	<!-- 登录验证器：用户有没有登录的资格 --><!-- 这个就是重写的认证过滤器 -->
	<b:bean id="myAuthenticationFilter" class="com.base.security.MyAuthenticationFilter">
		<b:property name="authenticationManager" ref="authenticationManager" />
		<b:property name="filterProcessesUrl" value="/j_spring_security_check" />
		<b:property name="authenticationSuccessHandler">
			<b:bean
				class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
				<b:property name="defaultTargetUrl" value="/index.jsp" />
			</b:bean>
		</b:property>
		<b:property name="authenticationFailureHandler">
			<b:bean
				class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
				<b:property name="defaultFailureUrl" value="/login.jsp" />
			</b:bean>
		</b:property>
	</b:bean>
	<!--一个自定义的filter，必须包含 authenticationManager,accessDecisionManager,securityMetadataSource三个属性， 
		我们的所有控制将在这三个类中实现，解释详见具体配置 -->
	<b:bean id="myFilter" class="com.base.security.MySecurityFilter">
		<!-- 处理验证的，这里需要特别说明的是：这个类不单只这个拦截器用到，还有验证拦截器AuthenticationProcessingFilter也用到 
			了，而且实际上的登陆验证也是AuthenticationProcessingFilter拦截器调用authenticationManager来处理的， 
			我们这个拦截器只是为了拿到验证用户信息而已（这里不太清楚，因为authenticationManager笔者设了断点， 用户登陆后再也没调用这个类了，而且调用这个类时不是笔者自己写的那个拦截器调用的， 
			看了spring技术内幕这本书才知道是AuthenticationProcessingFilter拦截器调用的）。 -->
		<b:property name="authenticationManager" ref="authenticationManager" />
		<!--这个也称为授权器，通过登录用户的权限信息、资源、获取资源所需的权限来根据不同的授权策略来判断用户是否有权限访问资源。 -->
		<b:property name="accessDecisionManager" ref="myAccessDecisionManagerBean" />
		<!--这个用来加载资源与权限的全部对应关系的，并提供一个通过资源获取所有权限的方法。 -->
		<b:property name="securityMetadataSource" ref="securityMetadataSource" />
	</b:bean>
	<!--验证配置，认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="myUserDetailService">
			<!--如果用户的密码采用加密的话 <password-encoder hash="md5" /> -->
		</authentication-provider>
	</authentication-manager>
	<!--在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等 -->
	<b:bean id="myUserDetailService" class="com.base.security.MyUserDetailServiceImpl" />
	<!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
	<b:bean id="myAccessDecisionManagerBean" class="com.base.security.MyAccessDecisionManager">
	</b:bean>
	<!--资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->
	<b:bean id="securityMetadataSource" class="com.base.security.MySecurityMetadataSource" />
	<b:bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<!-- <property name="basename" value="classpath:org/springframework/security/messages_zh_CN"></property> -->
		<b:property name="basename"
			value="classpath:config/properties/message_zh_CN"></b:property>
	</b:bean>
	<!--登录处理  -->
<!-- 	<b:bean id="myLoginFilter" init-method="init"
		class="com.base.security.MyAuthenticationFilter">
		<b:property name="authenticationManager" ref="authenticationManager" />
		<b:property name="filterProcessesUrl" value="/background/j_security_check" />
		验证成功后要跳转的URL
		<b:property name="successUrl" value="/background/index.html" />
		验证失败后要跳转的URL
		<b:property name="errorUrl" value="/background/login.html" />
	</b:bean> -->
</b:beans>  